#!/usr/bin/env node
'use strict';

const fs = require("fs");
const path = require('path');
const child_process = require("child_process");
const server_repo = require("./server-repo");

const rootDir = path.resolve(__dirname, '..');
process.chdir(rootDir);

const debug = true;

process.stdout.write("Syncing data from Git repository... ");
if (!fs.existsSync('./caches/DH2')) {
	child_process.execSync('git clone ' + server_repo + ' caches/DH2', {
	});
	child_process.execSync("git pull " + server_repo, {cwd: 'caches/DH2'});
}

child_process.execSync('npm run build', {cwd: 'caches/DH2'});

console.log("DONE");

const Dex = require('../caches/DH2/dist/sim/dex').Dex;
const toID = Dex.toID;
const ModConfigData = require('../config/mod-config').ModConfigData;
const ModConfig = ModConfigData.ClientMods;
var Formats = require('../caches/DH2/dist/config/formats.js').Formats;

for (const modid in Dex.dexes) {
	try {
		if ((/gen\d/.test(modid) && modid.length === 4) || modid === 'base') continue;
		let teambuilderConfig = Dex.dexes[modid].data.Scripts.teambuilderConfig;
		teambuilderConfig = teambuilderConfig ? teambuilderConfig : {};
		if(teambuilderConfig.moveIsNotUseless) teambuilderConfig.moveIsNotUseless = JSON.stringify(teambuilderConfig.moveIsNotUseless.toString());
		ModConfig[modid] = ModConfig[modid] ? ModConfig[modid] : {};
		ModConfig[modid] = Object.assign(ModConfig[modid], teambuilderConfig);
	} catch(err) {
		// delete ModConfig[modid];
		// delete BattleTeambuilderTable[modid];
		if (debug) {
			console.log("WARNING: Failed to load config data for " + modid);
			console.log("This was the error:");
			console.log(err);
		}
	}
}
process.stdout.write("Loading gen 6 data... ");
Dex.includeData();
console.log("DONE");

function es3stringify(obj) {
	let buf = JSON.stringify(obj);
	buf = buf.replace(/\"([A-Za-z][A-Za-z0-9]*)\"\:/g, '$1:');
	buf = buf.replace(/return\:/g, '"return":').replace(/new\:/g, '"new":').replace(/delete\:/g, '"delete":');
	return buf;
}

function requireNoCache(pathSpec) {
	delete require.cache[require.resolve(pathSpec)];
	return require(pathSpec);
}

process.stdout.write("Building `data/search-index.js`... ");
buildSearchIndex();
console.log("DONE");

process.stdout.write("Building `data/formats.js`... ");
buildFormats();
console.log("DONE");

process.stdout.write("Building `data/teambuilder-tables.js`... ");
buildTeambuilderTables();
console.log("DONE");

process.stdout.write("Building `data/pokedex.js`... ");
buildPokedex();
console.log("DONE");

process.stdout.write("Building `data/moves,items,abilities,typechart,learnsets.js`...");
buildMoves();
buildItems();
buildAbilities();
buildTypechart();
buildLearnsets();
console.log("DONE");

process.stdout.write("Building aliases, formats-data, mod-sprites, text.js...");
buildAliases();
buildFormatsData();
buildModSprites();
buildText();
console.log("DONE");

/*********************************************************
 * Build search-index.js
 *********************************************************/

function buildSearchIndex() {

	let index = [];

	index = index.concat(Object.keys(Dex.data.Pokedex).map(x => x + ' pokemon'));
	index = index.concat(Object.keys(Dex.data.Moves).map(x => x + ' move'));
	index = index.concat(Object.keys(Dex.data.Items).map(x => x + ' item'));
	index = index.concat(Object.keys(Dex.data.Abilities).map(x => x + ' ability'));
	index = index.concat(Object.keys(Dex.data.TypeChart).map(x => toID(x) + ' type'));
	index = index.concat(['physical', 'special', 'status'].map(x => toID(x) + ' category'));
	index = index.concat(['monster', 'water1', 'bug', 'flying', 'field', 'fairy', 'grass', 'humanlike', 'water3', 'mineral', 'amorphous', 'water2', 'ditto', 'dragon', 'undiscovered'].map(x => toID(x) + ' egggroup'));
	index = index.concat(['ou', 'uu', 'ru', 'nu', 'pu', 'zu', 'lc', 'nfe', 'uber', 'uubl', 'rubl', 'nubl', 'publ', 'zubl', 'cap', 'caplc', 'capnfe'].map(x => toID(x) + ' tier'));

	let BattleArticleTitles = {};

	try {
		for (const file of fs.readdirSync('../dex.pokemonshowdown.com/articles/')) {
			if (file.endsWith('.md')) {
				const id = file.slice(0, -3);
				const contents = '' + fs.readFileSync('../dex.pokemonshowdown.com/articles/' + file);
				if (contents.startsWith('# ')) {
					const title = contents.slice(2, contents.indexOf('\n'));
					if (title !== id.charAt(0).toUpperCase() + id.slice(1)) {
						BattleArticleTitles[id] = title;
					}
				}
				index.push('' + id + ' article');
			}
		}
	} catch (e) {
		console.log('\n(WARNING: NO ARTICLES)');
	}
	index.push('pokemon article');
	index.push('moves article');

	// generate aliases
	const usedIDs = [];
	function generateAlias(id, name, type) {
		usedIDs.push(id);
		let i = name.lastIndexOf(' ');
		if (i < 0) i = name.lastIndexOf('-');
		if (name.endsWith('-Mega-X') || name.endsWith('-Mega-Y')) {
			index.push('mega' + toID(name.slice(0, -7) + name.slice(-1)) + ' ' + type + ' ' + id + ' 0');
			index.push('m' + toID(name.slice(0, -7) + name.slice(-1)) + ' ' + type + ' ' + id + ' 0');
			index.push('mega' + toID(name.slice(-1)) + ' ' + type + ' ' + id + ' ' + toID(name.slice(0, -7)).length);
			return;
		}
		if (name.endsWith('-Mega')) {
			index.push('mega' + toID(name.slice(0, -5)) + ' ' + type + ' ' + id + ' 0');
			index.push('m' + toID(name.slice(0, -5)) + ' ' + type + ' ' + id + ' 0');
			return;
		}
		if (name.endsWith('-Alola')) {
			index.push('alolan' + toID(name.slice(0, -6)) + ' ' + type + ' ' + id + ' 0');
			return;
		}
		let oldI = i;
		if (name === 'Alakazam') i = 5;
		if (name === 'Arctovish') i = 5;
		if (name === 'Arctozolt') i = 5;
		if (name === 'Articuno') i = 5;
		if (name === 'Breloom') i = 3;
		if (name === 'Bronzong') i = 4;
		if (name === 'Celebi') i = 4;
		if (name === 'Charizard') i = 5;
		if (name === 'Donphan') i = 3;
		if (name === 'Dracovish') i = 5;
		if (name === 'Dracozolt') i = 5;
		if (name === 'Dragapult') i = 5;
		if (name === 'Dusclops') i = 3;
		if (name === 'Electabuzz') i = 6;
		if (name === 'Exeggutor') i = 2;
		if (name === 'Garchomp') i = 3;
		if (name === 'Hariyama') i = 4;
		if (name === 'Magearna') i = 2;
		if (name === 'Magnezone') i = 5;
		if (name === 'Mamoswine') i = 4;
		if (name === 'Moltres') i = 3;
		if (name === 'Nidoking') i = 4;
		if (name === 'Nidoqueen') i = 4;
		if (name === 'Nidorina') i = 4;
		if (name === 'Nidorino') i = 4;
		if (name === 'Regice') i = 3;
		if (name === 'Regidrago') i = 4;
		if (name === 'Regieleki') i = 4;
		if (name === 'Regigigas') i = 4;
		if (name === 'Regirock') i = 4;
		if (name === 'Registeel') i = 4;
		if (name === 'Slowbro') i = 4;
		if (name === 'Slowking') i = 4;
		if (name === 'Starmie') i = 4;
		if (name === 'Tyranitar') i = 6;
		if (name === 'Zapdos') i = 3;

		if (name === 'Acupressure') i = 3;
		if (name === 'Aromatherapy') i = 5;
		if (name === 'Boomburst') i = 4;
		if (name === 'Crabhammer') i = 4;
		if (name === 'Discharge') i = 3;
		if (name === 'Earthquake') i = 5;
		if (name === 'Extrasensory') i = 5;
		if (name === 'Flamethrower') i = 5;
		if (name === 'Headbutt') i = 4;
		if (name === 'Moonblast') i = 4;
		if (name === 'Moonlight') i = 4;
		if (name === 'Overheat') i = 4;
		if (name === 'Outrage') i = 3;
		if (name === 'Octazooka') i = 4;
		if (name === 'Payback') i = 3;
		if (name === 'Psyshock') i = 3;
		if (name === 'Psywave') i = 3;
		if (name === 'Rototiller') i = 4;
		if (name === 'Rollout') i = 4;
		if (name === 'Safeguard') i = 4;
		if (name === 'Sandstorm') i = 4;
		if (name === 'Smokescreen') i = 5;
		if (name === 'Stockpile') i = 5;
		if (name === 'Steamroller') i = 5;
		if (name === 'Superpower') i = 5;
		if (name === 'Supersonic') i = 5;
		if (name === 'Synchronoise') i = 7;
		if (name === 'Tailwind') i = 4;
		if (name === 'Telekinesis') i = 4;
		if (name === 'Teleport') i = 4;
		if (name === 'Thunderbolt') i = 7;
		if (name === 'Twineedle') i = 3;
		if (name === 'Uproar') i = 2;
		if (name === 'Venoshock') i = 4;
		if (name === 'Whirlpool') i = 5;
		if (name === 'Whirlwind') i = 5;
		let acronym;
		if (oldI < 0 && i > 0) {
			acronym = toID(name.charAt(0) + name.slice(i));
		}
		if (i < 0) return;
		index.push('' + toID(name.slice(i)) + ' ' + type + ' ' + id + ' ' + toID(name.slice(0, i)).length);
		if (name.startsWith('Hidden Power ')) {
			acronym = 'hp' + toID(name.substr(13));
			index.push('' + acronym + ' ' + type + ' ' + id + ' 0');
		} else if (name === 'Hidden Power') {
			index.push('hp ' + type + ' ' + id + ' 0');
		} else if (name.includes(' ')) {
			acronym = toID(name.split(' ').map((x, i) => i !== 0 ? x : x.charAt(0)).join(''));
		} else if (name.includes('-') && name.charAt(1) !== '-') {
			acronym = toID(name.split('-').map((x, i) => i !== 0 ? x : x.charAt(0)).join(''));
		}
		if (acronym) {
			index.push('' + acronym + ' ' + type + ' ' + id + ' 0');
		}
		if (name === 'High Jump Kick') {
			index.push('hjkick ' + type + ' ' + id + ' 0');
		} else if (name === 'Wake-Up Slap') {
			index.push('wuslap ' + type + ' ' + id + ' 0');
			index.push('wupslap ' + type + ' ' + id + ' 0');
		} else if (name === 'Zen Headbutt') {
			index.push('zhbutt ' + type + ' ' + id + ' 0');
		} else if (name === 'Articuno') {
			index.push('cuno ' + type + ' ' + id + ' 4');
		}

		let i2 = name.lastIndexOf(' ', i - 1);
		if (i2 < 0) i2 = name.lastIndexOf('-', i - 1);
		if (name === 'Zen Headbutt') i2 = 8;
		if (i2 >= 0) {
			index.push('' + toID(name.slice(i2)) + ' ' + type + ' ' + id + ' ' + toID(name.slice(0, i2)).length);
		}
	}
	for (const id in Dex.data.Pokedex) {
		const name = Dex.data.Pokedex[id].name;
		generateAlias(id, name, 'pokemon');
	}
	for (const id in Dex.data.Moves) {
		const name = Dex.data.Moves[id].name;
		generateAlias(id, name, 'move');
	}
	for (const id in Dex.data.Items) {
		const name = Dex.data.Items[id].name;
		generateAlias(id, name, 'item');
	}
	for (const id in Dex.data.Abilities) {
		const name = Dex.data.Abilities[id].name;
		generateAlias(id, name, 'ability');
	}

	const infoTable = {Pokedex: 'pokemon', Moves: 'move', Items: 'item', Abilities: 'ability', TypeChart: 'type'};
	for (const modid in ModConfig) {
		for (const key in infoTable) {
			try {
				const modDex = Dex.mod(modid);
				if (!modDex || !modDex.data || !modDex.data[key]) continue;
				for (let id in modDex.data[key]) {
					if (!modDex.data[key][id]) continue;
					if (!usedIDs.includes(toID(id)) && id in Dex.data.TypeChart === false) {
						index.push(toID(id) + ' ' + infoTable[key]);
						usedIDs.push(toID(id));
						const name = modDex.data[key][id].name;
						if (name) generateAlias(id, name, infoTable[key]);
					}
				}
			} catch(err) {
				if (debug) {
					console.log("WARNING: Failed to load search data for " + modid);
					console.log("This was the error:");
					console.log(err);
				}
			}
		}
	}

	index.sort();

	// manually rearrange
	index[index.indexOf('grass type')] = 'grass egggroup';
	index[index.indexOf('grass egggroup')] = 'grass type';

	index[index.indexOf('fairy type')] = 'fairy egggroup';
	index[index.indexOf('fairy egggroup')] = 'fairy type';

	index[index.indexOf('flying type')] = 'flying egggroup';
	index[index.indexOf('flying egggroup')] = 'flying type';

	index[index.indexOf('dragon type')] = 'dragon egggroup';
	index[index.indexOf('dragon egggroup')] = 'dragon type';

	index[index.indexOf('bug type')] = 'bug egggroup';
	index[index.indexOf('bug egggroup')] = 'bug type';

	index[index.indexOf('psychic type')] = 'psychic move';
	index[index.indexOf('psychic move')] = 'psychic type';

	index[index.indexOf('ditto pokemon')] = 'ditto egggroup';
	index[index.indexOf('ditto egggroup')] = 'ditto pokemon';


	let BattleSearchIndex = index.map(x => {
		x = x.split(' ');
		if (x.length > 3) {
			x[3] = Number(x[3]);
			x[2] = index.indexOf(x[2] + ' ' + x[1]);
		}
		return x;
	});

	let BattleSearchIndexOffset = BattleSearchIndex.map((entry, i) => {
		const id = entry[0];
		let name = '';
		switch (entry[1]) {
		case 'pokemon': name = Dex.species.get(id).name; break;
		case 'move': name = Dex.moves.get(id).name; break;
		case 'item': name = Dex.items.get(id).name; break;
		case 'ability': name = Dex.abilities.get(id).name; break;
		case 'article': name = BattleArticleTitles[id] || ''; break;
		}
		let res = '';
		let nonAlnum = 0;
		for (let i = 0, j = 0; i < id.length; i++, j++) {
			while (!/[a-zA-Z0-9]/.test(name[j])) {
				j++;
				nonAlnum++;
			}
			res += nonAlnum;
		}
		if (nonAlnum) return res;
		return '';
	});

	let BattleSearchCountIndex = {};
	for (const type in Dex.data.TypeChart) {
		BattleSearchCountIndex[type + ' move'] = Object.keys(Dex.data.Moves).filter(id => (Dex.data.Moves[id].type === type)).length;
	}

	for (const type in Dex.data.TypeChart) {
		BattleSearchCountIndex[type + ' pokemon'] = Object.keys(Dex.data.Pokedex).filter(id => (Dex.data.Pokedex[id].types.indexOf(type) >= 0)).length;
	}

	let buf = '// DO NOT EDIT - automatically built with build-tools/build-indexes\n\n';

	buf += 'exports.BattleSearchIndex = ' + JSON.stringify(BattleSearchIndex) + ';\n\n';

	buf += 'exports.BattleSearchIndexOffset = ' + JSON.stringify(BattleSearchIndexOffset) + ';\n\n';

	buf += 'exports.BattleSearchCountIndex = ' + JSON.stringify(BattleSearchCountIndex) + ';\n\n';

	buf += 'exports.BattleArticleTitles = ' + JSON.stringify(BattleArticleTitles) + ';\n\n';

	fs.writeFileSync('play.pokemonshowdown.com/data/search-index.js', buf);
}

/*********************************************************
 * Build teambuilder-tables.js
 *********************************************************/

function buildTeambuilderTables() {
	const BattleTeambuilderTable = {};

	let buf = '// DO NOT EDIT - automatically built with build-tools/build-indexes\n\n';
	const GENS = [9, 8, 7, 6, 5, 4, 3, 2, 1];
	const DOUBLES = GENS.filter(x => x > 2).map(num => -num);
	const VGC = GENS.filter(x => x > 3).map(num => -num - 0.5);
	const NFE = GENS.map(num => num + 0.3);
	const LC = GENS.map(num => num + 0.7);
	const STADIUM = [2.04, 1.04];
	const NATDEX = [9.1, 8.1];
	const OTHER = [9.9, 9.411, 9.41, 9.401, 9.4, 9.2, -9.4, -9.401, 8.6, 8.4, 8.2, 8.1, -8.4, -8.6, 7.1];

	// process.stdout.write("\n  ");
	for (const genIdent of [...GENS, ...DOUBLES, ...VGC, ...NFE, ...STADIUM, ...OTHER, ...NATDEX, ...LC]) {
		const isLetsGo = (genIdent === 7.1);
		const isBDSP = (genIdent === 8.6 || genIdent === -8.6);
		const isMetBattle = ('' + genIdent).endsWith('.2');
		const isNFE = ('' + genIdent).endsWith('.3');
		const isLC = ('' + genIdent).endsWith('.7');
		const isSSDLC1 = (genIdent === 8.4 || genIdent === -8.4);
		const isPreDLC = (genIdent === 9.4 || genIdent === 9.41 || genIdent === -9.4);
		const isSVDLC1 = (genIdent === 9.401 || genIdent === 9.411 || genIdent === -9.401);
		const isNatDex = ('' + genIdent).endsWith('.1') && genIdent > 8;
		const isStadium = ('' + genIdent).endsWith('.04');
		const isDoubles = (genIdent < 0);
		const isVGC = ('' + genIdent).endsWith('.5');
		const isGen9BH = genIdent === 9.9;
		const genNum = Math.floor(isDoubles ? -genIdent : genIdent);
		const gen = (() => {
			let genStr = 'gen' + genNum;
			if (isSSDLC1) genStr += 'dlc1';
			if (isLetsGo) genStr += 'letsgo';
			if (isBDSP) genStr += 'bdsp';
			if (isPreDLC) genStr += 'predlc';
			if (isSVDLC1) genStr += 'dlc1';
			if (isStadium) genStr += 'stadium' + (genNum > 1 ? genNum : '');
			return genStr;
		})();
		// process.stdout.write("" + gen + (isDoubles ? " doubles" : "") + "... ");
		const pokemon = Object.keys(Dex.data.Pokedex);
		pokemon.sort();
		const tierTable = {};
		const overrideTier = {};
		const ubersUUBans = {};
		const monotypeBans = {};
		const nonstandardMoves = [];
		for (const id of pokemon) {
			const species = Dex.mod(gen).species.get(id);
			const baseSpecies = Dex.mod(gen).species.get(species.baseSpecies);
			if (species.gen > genNum) continue;
			const tier = (() => {
				if (isMetBattle) {
					let tier = species.tier;
					if (species.isNonstandard) {
						if (species.isNonstandard === 'Past') {
							tier = Dex.mod('gen7').species.get(species.name).tier;
						} else {
							tier = 'OU';
						}
					}
					if (species.isNonstandard === 'Gigantamax') tier = '(Uber)';
					if (species.tier === 'CAP LC') tier = 'LC';
					if (species.tier === 'CAP NFE') tier = 'NFE';
					if (species.tier === 'CAP') tier = 'OU';
					const format = Dex.formats.get(gen + 'metronomebattle');
					let bst = 0;
					for (const stat of Object.values(species.baseStats)) {
						bst += stat;
					}
					if (bst > 625) tier = 'Illegal';
					if (Dex.formats.getRuleTable(format).isBannedSpecies(species)) tier = 'Illegal';
					if (species.types.includes('Steel')) tier = 'Illegal';
					return tier;
				}
				if (isNFE) {
					let tier = species.tier;
					if (!species.nfe) tier = 'Illegal';
					const format = Dex.formats.get(gen + 'nfe');
					const banlist = Dex.formats.getRuleTable(format);
					if (banlist.isBannedSpecies(species)) {
						tier = 'Uber';
					}
					return tier;
				}
				if (isLC) {
					let tier = species.tier;
					const lc = Dex.formats.get(gen + 'lc');
					const lcBanlist = Dex.formats.getRuleTable(lc);
					if (!species.nfe || species.prevo || lcBanlist.isBannedSpecies(species)) {
						tier = 'Illegal';
					}
					if (/^([OURNPZ]U(BL)?|Uber|AG)$/g.test(tier) && tier !== 'Illegal') {
						tier = 'LC';
					}
					return tier;
				}
				if (isLetsGo) {
					let validNum = (baseSpecies.num <= 151 && species.num >= 1) || [808, 809].includes(baseSpecies.num);
					if (!validNum) return 'Illegal';
					if (species.forme && !['Alola', 'Mega', 'Mega-X', 'Mega-Y', 'Starter'].includes(species.forme)) return 'Illegal';
					if (species.name === 'Pikachu-Alola') return 'Illegal';
					return species.tier;
				}
				if (isVGC) {
					if (species.isNonstandard && species.isNonstandard !== 'Gigantamax') return 'Illegal';
					// these are breaking certain mods, disable them for now.

					if (baseSpecies.tags.includes('Mythical')) return 'Mythical';
					if (baseSpecies.tags.includes('Restricted Legendary')) return 'Restricted Legendary';
					if (species.tier === 'NFE') return 'NFE';
					if (species.tier === 'LC') return 'LC';
					return 'Regular';
				}
				if (isGen9BH) {
					if ((species.natDexTier === 'Illegal' || species.forme.includes('Totem')) &&
						!['Floette-Eternal', 'Greninja-Ash', 'Xerneas-Neutral'].includes(species.name)) {
						return 'Illegal';
					}
					if ((species.name === 'Xerneas' || species.battleOnly || species.forme === 'Eternamax') &&
						!(species.isMega || species.isPrimal || ['Greninja-Ash', 'Necrozma-Ultra'].includes(species.name))) {
						return 'Illegal';
					}
					if (species.isNonstandard && ['LGPE', 'CAP', 'Future'].includes(species.isNonstandard)) return 'Illegal';
					return species.tags.includes('Mythical') ? 'Mythical' :
						species.tags.includes('Restricted Legendary') ? 'Restricted Legendary' :
							species.nfe ? (species.prevo ? 'NFE' : 'LC') : 'Regular';
				}
				if (species.tier === 'CAP' || species.tier === 'CAP NFE' || species.tier === 'CAP LC') {
					return species.tier;
				}
				if (isDoubles && genNum > 4) {
					return species.doublesTier;
				}
				if (isNatDex || (isPreDLC && genNum === 9.41) || (isSVDLC1 && genNum === 9.411)) {
					return species.natDexTier;
				}
				return species.tier;
			})();
			overrideTier[species.id] = tier;
			if (species.forme) {
				if (
					[
						'Aegislash', 'Castform', 'Cherrim', 'Cramorant', 'Eiscue', 'Meloetta', 'Mimikyu', 'Minior', 'Morpeko', 'Wishiwashi',
					].includes(species.baseSpecies) || species.forme.includes('Totem') || species.forme.includes('Zen') ||
					(species.baseSpecies === 'Ogerpon' && species.forme.includes('Tera'))
				) {
					continue;
				}
			}

			if (!tierTable[tier]) tierTable[tier] = [];
			tierTable[tier].push(id);

			if (genNum === 9) {
				const ubersUU = Dex.formats.get(gen + 'ubersuu');
				if (ubersUU.exists && Dex.formats.getRuleTable(ubersUU).isBannedSpecies(species)) {
					ubersUUBans[species.id] = 1;
				}
				const mono = Dex.formats.get(gen + (isNatDex ? 'nationaldex' : '') + 'monotype');
				if (Dex.formats.getRuleTable(mono).isBannedSpecies(species)) {
					monotypeBans[species.id] = 1;
				}
			}
		}

		nonstandardMoves.push(...Object.keys(Dex.data.Moves).filter(id => {
			const move = Dex.mod(isSSDLC1 ? 'gen8dlc1' : isPreDLC ? 'gen9predlc' : 'gen9dlc1').moves.get(id);
			const bMove = Dex.mod(isSSDLC1 ? 'gen8' : 'gen9').moves.get(id);
			return bMove.isNonstandard !== move.isNonstandard;
		}));

		const tiers = [];
		const items = [];
		const formatSlices = {};

		if (isNatDex || (isPreDLC && genNum === 9.41) || (isSVDLC1 && genNum === 9.411)) {
			BattleTeambuilderTable['gen' + genNum + 'natdex'] = {};
			BattleTeambuilderTable['gen' + genNum + 'natdex'].tiers = tiers;
			BattleTeambuilderTable['gen' + genNum + 'natdex'].overrideTier = overrideTier;
			BattleTeambuilderTable['gen' + genNum + 'natdex'].items = items;
			BattleTeambuilderTable['gen' + genNum + 'natdex'].monotypeBans = monotypeBans;
			BattleTeambuilderTable['gen' + genNum + 'natdex'].formatSlices = formatSlices;
		} else if (isMetBattle) {
			BattleTeambuilderTable[gen + 'metronome'] = {};
			BattleTeambuilderTable[gen + 'metronome'].tiers = tiers;
			BattleTeambuilderTable[gen + 'metronome'].items = items;
			BattleTeambuilderTable[gen + 'metronome'].formatSlices = formatSlices;
		} else if (isNFE) {
			BattleTeambuilderTable[gen + 'nfe'] = {};
			BattleTeambuilderTable[gen + 'nfe'].tiers = tiers;
			BattleTeambuilderTable[gen + 'nfe'].overrideTier = overrideTier;
			BattleTeambuilderTable[gen + 'nfe'].formatSlices = formatSlices;
		} else if (isLC) {
			BattleTeambuilderTable[gen + 'lc'] = {};
			BattleTeambuilderTable[gen + 'lc'].tiers = tiers;
			BattleTeambuilderTable[gen + 'lc'].overrideTier = overrideTier;
			BattleTeambuilderTable[gen + 'lc'].formatSlices = formatSlices;
		} else if (isLetsGo) {
			BattleTeambuilderTable['gen7letsgo'] = {};
			BattleTeambuilderTable['gen7letsgo'].learnsets = {};
			BattleTeambuilderTable['gen7letsgo'].tiers = tiers;
			BattleTeambuilderTable['gen7letsgo'].overrideTier = overrideTier;
			BattleTeambuilderTable['gen7letsgo'].formatSlices = formatSlices;
		} else if (isBDSP && !isDoubles) {
			BattleTeambuilderTable['gen8bdsp'] = {};
			BattleTeambuilderTable['gen8bdsp'].learnsets = {};
			BattleTeambuilderTable['gen8bdsp'].tiers = tiers;
			BattleTeambuilderTable['gen8bdsp'].items = items;
			BattleTeambuilderTable['gen8bdsp'].overrideTier = overrideTier;
			BattleTeambuilderTable['gen8bdsp'].monotypeBans = monotypeBans;
			BattleTeambuilderTable['gen8bdsp'].formatSlices = formatSlices;
		} else if (isVGC) {
			BattleTeambuilderTable[gen + 'vgc'] = {};
			BattleTeambuilderTable[gen + 'vgc'].tiers = tiers;
			BattleTeambuilderTable[gen + 'vgc'].formatSlices = formatSlices;
		} else if (isDoubles) {
			BattleTeambuilderTable[gen + 'doubles'] = {};
			BattleTeambuilderTable[gen + 'doubles'].tiers = tiers;
			BattleTeambuilderTable[gen + 'doubles'].overrideTier = overrideTier;
			BattleTeambuilderTable[gen + 'doubles'].formatSlices = formatSlices;
		} else if (isGen9BH) {
			BattleTeambuilderTable['bh'] = {};
			BattleTeambuilderTable['bh'].tiers = tiers;
			BattleTeambuilderTable['bh'].overrideTier = overrideTier;
			BattleTeambuilderTable['bh'].formatSlices = formatSlices;
		} else if (gen === 'gen9') {
			BattleTeambuilderTable.tiers = tiers;
			BattleTeambuilderTable.items = items;
			BattleTeambuilderTable.overrideTier = overrideTier;
			BattleTeambuilderTable.ubersUUBans = ubersUUBans;
			BattleTeambuilderTable.monotypeBans = monotypeBans;
			BattleTeambuilderTable.formatSlices = formatSlices;
		} else {
			BattleTeambuilderTable[gen] = {};
			BattleTeambuilderTable[gen].overrideTier = overrideTier;
			BattleTeambuilderTable[gen].tiers = tiers;
			BattleTeambuilderTable[gen].items = items;
			BattleTeambuilderTable[gen].formatSlices = formatSlices;
			if (genNum >= 5) {
				BattleTeambuilderTable[gen].monotypeBans = monotypeBans;
			}
			if (isSSDLC1 || isPreDLC || isSVDLC1) {
				BattleTeambuilderTable[gen].nonstandardMoves = nonstandardMoves;
				BattleTeambuilderTable[gen].learnsets = {};
			}
		}

		const tierOrder = (() => {
			if (isVGC || isGen9BH) {
				return ["Mythical", "Restricted Legendary", "Regular", "NFE", "LC"];
			}
			if (isDoubles && genNum > 4) {
				return ["DUber", "(DUber)", "DOU", "DBL", "(DOU)", "DUU", "(DUU)", "New", "NFE", "LC"];
			}
			if (gen === 'gen4') {
				return ["CAP", "CAP NFE", "CAP LC", "AG", "Uber", "OU", "(OU)", "UUBL", "UU", "NUBL", "NU", "NFE", "LC"];
			}
			return ["CAP", "CAP NFE", "CAP LC", "AG", "Uber", "(Uber)", "OU", "(OU)", "UUBL", "UU", "RUBL", "RU", "NUBL", "NU", "PUBL", "PU", "ZUBL", "ZU", "New", "NFE", "LC", "Unreleased"];
		})();

		for (const tier of tierOrder) {
			if (tier in {OU:1, AG:1, Uber:1, UU:1, RU:1, NU:1, PU:1, ZU: 1, NFE:1, LC:1, DOU:1, DUU:1, "(DUU)":1, New:1, Legal:1, Regular:1, "Restricted Legendary":1, "CAP LC":1}) {
				let usedTier = tier;
				if (usedTier === "(DUU)") usedTier = "DNU";
				formatSlices[usedTier] = tiers.length;
			}
			if (!tierTable[tier]) continue;
			if (tier === "(PU)") {
				tiers.push(['header', "Below PU"]);
			} else if (tier === "(DUU)") {
				tiers.push(['header', "Below DUU"]);
			} else if (tier.charAt(0) === '(') {
				tiers.push(['header', tier.slice(1, -1) + " by technicality"]);
			} else if (tier === "NFE") {
				tiers.push(['header', "NFEs not in a higher tier"]);
			} else {
				tiers.push(['header', tier]);
			}
			tiers.push(...tierTable[tier]);
		}
		if (!isDoubles) {
			if (!formatSlices['OU']) formatSlices['OU'] = formatSlices['New'];
			if (!formatSlices['UU']) formatSlices['UU'] = formatSlices['New'];
			if (!formatSlices['RU']) formatSlices['RU'] = formatSlices['New'];
		} else {
			if (!formatSlices['DOU']) formatSlices['DOU'] = formatSlices['New'];
			if (!formatSlices['DUU']) formatSlices['DUU'] = formatSlices['New'];
		}

		const itemList = Object.keys(Dex.data.Items);
		itemList.sort();

		const greatItems = [['header', "Popular items"]];
		const goodItems = [['header', "Items"]];
		const specificItems = [['header', "Pok&eacute;mon-specific items"]];
		const poorItems = [['header', "Usually useless items"]];
		const badItems = [['header', "Useless items"]];
		for (const id of itemList) {
			const item = Dex.mod(gen).items.get(id);
			if (item.gen > genNum) {
				continue;
			}
			if (item.isNonstandard && !isMetBattle) {
				if (isNatDex) {
					let curItem = item;
					let curGen = genNum;
					while (item.isNonstandard && curGen >= 7) {
						curItem = Dex.forGen(curGen).items.get(item.id);
						curGen--;
					}
					if (curItem.isNonstandard) continue;
				} else if (genNum !== 2) {
					continue;
				}
			}
			if (isMetBattle) {
				const banlist = Dex.formats.getRuleTable(Dex.formats.get(gen + 'metronomebattle'));
				if (banlist.isBanned('item:' + item.id)) continue;
			}
			if (item.itemUser || item.megaStone || id === 'boosterenergy') {
				specificItems.push(id);
				continue;
			}
			if (item.isPokeball || item.name.startsWith("TR")) {
				badItems.push(id);
				continue;
			}
			switch (item.rating) {
			case 3:
				greatItems.push(id);
				break;
			case 2:
				goodItems.push(id);
				break;
			// outclassed items
			case 1:
				poorItems.push(id);
				break;
			// Fling-only
			case 0:
				badItems.push(id);
				break;
			default:
				goodItems.push(id);
			}
		}
		items.push(...greatItems);
		items.push(...goodItems);
		items.push(...specificItems);
		items.push(...poorItems);
		items.push(...badItems);
	}

	//
	// Learnset table
	//

	const gen3HMs = new Set(['cut', 'fly', 'surf', 'strength', 'flash', 'rocksmash', 'waterfall', 'dive']);
	const gen4HMs = new Set(['cut', 'fly', 'surf', 'strength', 'rocksmash', 'waterfall', 'rockclimb']);

	function getLearnsetStr(moveid, learnMoveArr, pokemonid = "", modid = "") {
		let learnsetStr = '';
		if (!learnMoveArr || !learnMoveArr.map) {
			return "";
		}
		const gens = learnMoveArr.map(x => Number(x[0]));
		const minGen = Math.min(...gens);
		const vcOnly = (minGen === 7 && learnMoveArr.every(x => x[0] !== '7' || x === '7V') ||
			minGen === 8 && learnMoveArr.every(x => x[0] !== '8' || x === '8V') ||
			minGen === 9 && learnMoveArr.every(x => x[0] !== '9' || x === '9V'));

      if (minGen <= 4 && minGen > 2 && (gen3HMs.has(moveid) || gen4HMs.has(moveid))) {
			let legalGens = '';
			let available = false;

			if (minGen === 3) {
				legalGens += '3';
				available = true;
			}
			if (available) available = !gen3HMs.has(moveid);

			if (available || gens.includes(4)) {
				legalGens += '4';
				available = true;
			}
			if (available) available = !gen4HMs.has(moveid);

			let minUpperGen = available ? 5 : Math.min(
				...gens.filter(gen => gen > 4)
			);
			legalGens += '0123456789'.slice(minUpperGen);
			learnsetStr = legalGens;
		} else {
			learnsetStr = '0123456789'.slice(minGen);
		}

		if (gens.indexOf(6) >= 0) learnsetStr += 'p';
		if (gens.indexOf(7) >= 0 && !vcOnly) learnsetStr += 'q';
		if (gens.indexOf(8) >= 0 && !vcOnly) learnsetStr += 'g';
		if (gens.indexOf(9) >= 0 && !vcOnly) learnsetStr += 'a';
		return learnsetStr;
	}

	const learnsets = {};
	BattleTeambuilderTable.learnsets = learnsets;
	for (const id in Dex.data.Learnsets) {
		const learnset = Dex.data.Learnsets[id].learnset;
		if (!learnset) continue;
		learnsets[id] = {};
		for (const moveid in learnset) {
			const gens = learnset[moveid].map(x => Number(x[0]));
			const minGen = Math.min(...gens);

			if (minGen <= 4 && (gen3HMs.has(moveid) || gen4HMs.has(moveid))) {
				let legalGens = '';
				let available = false;

				if (minGen === 3) {
					legalGens += '3';
					available = true;
				}
				if (available) available = !gen3HMs.has(moveid);

				if (available || gens.includes(4)) {
					legalGens += '4';
					available = true;
				}
				if (available) available = !gen4HMs.has(moveid);

				let minUpperGen = available ? 5 : Math.min(
					...gens.filter(gen => gen > 4)
				);
				legalGens += '0123456789'.slice(minUpperGen);
				learnsets[id][moveid] = legalGens;
			} else {
				learnsets[id][moveid] = '0123456789'.slice(minGen);
			}

			if (gens.indexOf(6) >= 0) learnsets[id][moveid] += 'p';
			if (gens.indexOf(7) >= 0 && learnset[moveid].some(x => x[0] === '7' && x !== '7V')) {
				learnsets[id][moveid] += 'q';
			}
			if (gens.indexOf(8) >= 0 && learnset[moveid].some(x => x[0] === '8' && x !== '8V')) {
				learnsets[id][moveid] += 'g';
			}
			if (gens.indexOf(9) >= 0 && learnset[moveid].some(x => x[0] === '9' && x !== '9V')) {
				learnsets[id][moveid] += 'a';
			}
		}
	}
	const G2Learnsets = Dex.mod('gen2').data.Learnsets;
	for (const id in G2Learnsets) {
		const learnset = G2Learnsets[id].learnset;
		for (const moveid in learnset) {
			const gens = learnset[moveid].map(x => Number(x[0]));
			const minGen = Math.min(...gens);
			if (!learnsets[id]) {
				throw new Error(`${id} has a Gen 2 learnset but not a modern learnset`);
			}
			if (!learnsets[id][moveid]) learnsets[id][moveid] = '';
			if (minGen === 2) learnsets[id][moveid] = '2' + learnsets[id][moveid];
			if (minGen === 1) learnsets[id][moveid] = '12' + learnsets[id][moveid];
		}
	}
	const LGLearnsets = Dex.mod('gen7letsgo').data.Learnsets;
	for (const id in LGLearnsets) {
		const species = Dex.mod('gen7letsgo').species.get(id);
		const baseSpecies = Dex.mod('gen7letsgo').species.get(species.baseSpecies);
		const validNum = (baseSpecies.num <= 151 && baseSpecies.num >= 1) || [808, 809].includes(baseSpecies.num);
		if (!validNum) continue;
		if (species.forme && !['Alola', 'Mega', 'Mega-X', 'Mega-Y', 'Starter'].includes(species.forme)) continue;
		const learnset = LGLearnsets[id].learnset;
		BattleTeambuilderTable['gen7letsgo'].learnsets[id] = {};
		for (const moveid in learnset) {
			BattleTeambuilderTable['gen7letsgo'].learnsets[id][moveid] = '7';
		}
	}
	const BDSPLearnsets = Dex.mod('gen8bdsp').data.Learnsets;
	for (const id in BDSPLearnsets) {
		const species = Dex.mod('gen8bdsp').species.get(id);
		if (species.isNonstandard && !['Unobtainable', 'CAP'].includes(species.isNonstandard)) continue;
		const learnset = BDSPLearnsets[id].learnset;
		BattleTeambuilderTable['gen8bdsp'].learnsets[id] = {};
		for (const moveid in learnset) {
			BattleTeambuilderTable['gen8bdsp'].learnsets[id][moveid] = '8g';
		}
	}
	const SSDLC1Learnsets = Dex.mod('gen8dlc1').data.Learnsets;
	for (const id in SSDLC1Learnsets) {
		const learnset = SSDLC1Learnsets[id].learnset;
		if (!learnset) continue;
		BattleTeambuilderTable['gen8dlc1'].learnsets[id] = {};
		for (const moveid in learnset) {
			const gens = learnset[moveid].map(x => Number(x[0]));
			const minGen = Math.min(...gens);

			if (minGen <= 4 && (gen3HMs.has(moveid) || gen4HMs.has(moveid))) {
				let legalGens = '';
				let available = false;

				if (minGen === 3) {
					legalGens += '3';
					available = true;
				}
				if (available) available = !gen3HMs.has(moveid);

				if (available || gens.includes(4)) {
					legalGens += '4';
					available = true;
				}
				if (available) available = !gen4HMs.has(moveid);

				let minUpperGen = available ? 5 : Math.min(
					...gens.filter(gen => gen > 4)
				);
				legalGens += '012345678'.slice(minUpperGen);
				BattleTeambuilderTable['gen8dlc1'].learnsets[id][moveid] = legalGens;
			} else {
				BattleTeambuilderTable['gen8dlc1'].learnsets[id][moveid] = '012345678'.slice(minGen);
			}

			if (gens.indexOf(6) >= 0) BattleTeambuilderTable['gen8dlc1'].learnsets[id][moveid] += 'p';
			if (gens.indexOf(7) >= 0 && learnset[moveid].some(x => x[0] === '7' && x !== '7V')) {
				BattleTeambuilderTable['gen8dlc1'].learnsets[id][moveid] += 'q';
			}
			if (gens.indexOf(8) >= 0 && learnset[moveid].some(x => x[0] === '8' && x !== '8V')) {
				BattleTeambuilderTable['gen8dlc1'].learnsets[id][moveid] += 'g';
			}
		}
	}
	const PreDLCLearnsets = Dex.mod('gen9predlc').data.Learnsets;
	for (const id in PreDLCLearnsets) {
		const learnset = PreDLCLearnsets[id].learnset;
		if (!learnset) continue;
		BattleTeambuilderTable['gen9predlc'].learnsets[id] = {};
		for (const moveid in learnset) {
			const gens = learnset[moveid].map(x => Number(x[0]));
			const minGen = Math.min(...gens);

			if (minGen <= 4 && (gen3HMs.has(moveid) || gen4HMs.has(moveid))) {
				let legalGens = '';
				let available = false;

				if (minGen === 3) {
					legalGens += '3';
					available = true;
				}
				if (available) available = !gen3HMs.has(moveid);

				if (available || gens.includes(4)) {
					legalGens += '4';
					available = true;
				}
				if (available) available = !gen4HMs.has(moveid);

				let minUpperGen = available ? 5 : Math.min(
					...gens.filter(gen => gen > 4)
				);
				legalGens += '0123456789'.slice(minUpperGen);
				BattleTeambuilderTable['gen9predlc'].learnsets[id][moveid] = legalGens;
			} else {
				BattleTeambuilderTable['gen9predlc'].learnsets[id][moveid] = '0123456789'.slice(minGen);
			}

			if (gens.indexOf(6) >= 0) BattleTeambuilderTable['gen9predlc'].learnsets[id][moveid] += 'p';
			if (gens.indexOf(7) >= 0 && learnset[moveid].some(x => x[0] === '7' && x !== '7V')) {
				BattleTeambuilderTable['gen9predlc'].learnsets[id][moveid] += 'q';
			}
			if (gens.indexOf(8) >= 0 && learnset[moveid].some(x => x[0] === '8' && x !== '8V')) {
				BattleTeambuilderTable['gen9predlc'].learnsets[id][moveid] += 'g';
			}
			if (gens.indexOf(9) >= 0 && learnset[moveid].some(x => x[0] === '9' && x !== '9V')) {
				BattleTeambuilderTable['gen9predlc'].learnsets[id][moveid] += 'a';
			}
		}
	}
	const SVDLC1Learnsets = Dex.mod('gen9dlc1').data.Learnsets;
	for (const id in SVDLC1Learnsets) {
		const learnset = SVDLC1Learnsets[id].learnset;
		if (!learnset) continue;
		BattleTeambuilderTable['gen9dlc1'].learnsets[id] = {};
		for (const moveid in learnset) {
			const gens = learnset[moveid].map(x => Number(x[0]));
			const minGen = Math.min(...gens);

			if (minGen <= 4 && (gen3HMs.has(moveid) || gen4HMs.has(moveid))) {
				let legalGens = '';
				let available = false;

				if (minGen === 3) {
					legalGens += '3';
					available = true;
				}
				if (available) available = !gen3HMs.has(moveid);

				if (available || gens.includes(4)) {
					legalGens += '4';
					available = true;
				}
				if (available) available = !gen4HMs.has(moveid);

				let minUpperGen = available ? 5 : Math.min(
					...gens.filter(gen => gen > 4)
				);
				legalGens += '0123456789'.slice(minUpperGen);
				BattleTeambuilderTable['gen9dlc1'].learnsets[id][moveid] = legalGens;
			} else {
				BattleTeambuilderTable['gen9dlc1'].learnsets[id][moveid] = '0123456789'.slice(minGen);
			}

			if (gens.indexOf(6) >= 0) BattleTeambuilderTable['gen9dlc1'].learnsets[id][moveid] += 'p';
			if (gens.indexOf(7) >= 0 && learnset[moveid].some(x => x[0] === '7' && x !== '7V')) {
				BattleTeambuilderTable['gen9dlc1'].learnsets[id][moveid] += 'q';
			}
			if (gens.indexOf(8) >= 0 && learnset[moveid].some(x => x[0] === '8' && x !== '8V')) {
				BattleTeambuilderTable['gen9dlc1'].learnsets[id][moveid] += 'g';
			}
			if (gens.indexOf(9) >= 0 && learnset[moveid].some(x => x[0] === '9' && x !== '9V')) {
				BattleTeambuilderTable['gen9dlc1'].learnsets[id][moveid] += 'a';
			}
		}
	}

	// Client relevant data that should be overriden by past gens and mods
	const overrideSpeciesKeys = ['abilities', 'baseStats', 'cosmeticFormes', 'isNonstandard', 'requiredItems', 'types', 'unreleasedHidden'];
	const overrideMoveKeys = ['accuracy', 'basePower', 'category', 'desc', 'flags', 'isNonstandard', 'noSketch', 'pp', 'priority', 'shortDesc', 'target', 'type', 'viable'];
	const overrideAbilityKeys = ['desc', 'isNonstandard', 'rating', 'shortDesc'];
	const overrideItemKeys = ['desc', 'isNonstandard', 'rating', 'shortDesc'];

	//
	// Past gen table
	//

	for (const genNum of [8, 7, 6, 5, 4, 3, 2, 1]) {
		const gen = 'gen' + genNum;
		const nextGen = 'gen' + (genNum + 1);
		const genDex = Dex.mod(gen);
		const genData = genDex.data;
		const nextGenDex = Dex.mod(nextGen);
		const nextGenData = nextGenDex.data;

		const overrideSpeciesData = {};
		BattleTeambuilderTable[gen].overrideSpeciesData = overrideSpeciesData;
		for (const id in genData.Pokedex) {
			const curEntry = genDex.species.get(id);
			const nextEntry = nextGenDex.species.get(id);
			for (const key of overrideSpeciesKeys) {
				if (JSON.stringify(curEntry[key]) !== JSON.stringify(nextEntry[key])) {
					if (!overrideSpeciesData[id]) overrideSpeciesData[id] = {};
					overrideSpeciesData[id][key] = curEntry[key];
				}
			}
		}

		const overrideDexInfo = {};
		BattleTeambuilderTable[gen].overrideDexInfo = overrideDexInfo;
		for (const id in genData.Pokedex) {
			const modEntry = genData.Pokedex[id];
			const baseEntry = Dex.data.Pokedex[id];
			if (typeof baseEntry === 'undefined') {
				overrideDexInfo[id] = {};
				overrideDexInfo[id] = modEntry;
				overrideDexInfo[id].exists = true;
				continue;
			}
			for (const key in modEntry) {
				const modString = JSON.stringify(modEntry[key]);
				const baseString = JSON.stringify(baseEntry[key]);
				if (modString !== baseString) {
					if (!overrideDexInfo[id]) overrideDexInfo[id] = {};
					if (modString === undefined) overrideDexInfo[id][key] = null;
					else try {
						overrideDexInfo[id][key] = JSON.parse(modString);
					} catch (e) {
						// Vivillon-Fancy coded with intentional undefined fields in the source, so we'll escape it
						if (id === 'vivillonfancy') continue;
						console.log(gen + " " + id + " " + key + " parsed an invalid value: " + modString);
						continue;
					}
				}
			}
		}
		const overrideMoveInfo = {};
		BattleTeambuilderTable[gen].overrideMoveInfo = overrideMoveInfo;
		for (const id in genData.Moves) {
			const modEntry = genData.Moves[id];
			const baseEntry = Dex.data.Moves[id];
			if (typeof baseEntry === 'undefined') {
				overrideMoveInfo[id] = {};
				overrideMoveInfo[id] = modEntry;
				overrideMoveInfo[id].exists = true;
				continue;
			}
			for (const key in modEntry) {
				if (!overrideMoveKeys.includes(key)) continue;
				const modString = JSON.stringify(modEntry[key]);
				const baseString = JSON.stringify(baseEntry[key]);
				if (modString !== baseString) {
					if (!overrideMoveInfo[id]) overrideMoveInfo[id] = {};
					//if (modString === undefined) overrideMoveInfo[id][key] = null;
					overrideMoveInfo[id][key] = JSON.parse(modString);
				}
			}
		}

		const overrideAbilityData = {};
		BattleTeambuilderTable[gen].overrideAbilityData = overrideAbilityData;
		for (const id in genData.Abilities) {
			const curEntry = genDex.abilities.get(id);
			const nextEntry = nextGenDex.abilities.get(id);
			for (const key of overrideAbilityKeys) {
				if (JSON.stringify(curEntry[key]) !== JSON.stringify(nextEntry[key])) {
					if (!overrideAbilityData[id]) overrideAbilityData[id] = {};
					overrideAbilityData[id][key] = curEntry[key];
				}
			}
		}

		const overrideItemInfo = {};
		BattleTeambuilderTable[gen].overrideItemInfo = overrideItemInfo;
		for (const id in genData.Items) {
			const curEntry = genDex.items.get(id);
			const nextEntry = nextGenDex.items.get(id);
			for (const key in curEntry) {
				if (!overrideItemKeys.includes(key)) continue;
				const curString = JSON.stringify(curEntry[key]);
				const nextString = JSON.stringify(nextEntry[key]);
				if (curString !== nextString) {
					if (!overrideItemInfo[id]) overrideItemInfo[id] = {};
					if (curString === undefined) overrideItemInfo[id][key] = null;
					else overrideItemInfo[id][key] = JSON.parse(curString);
					if(key === 'desc' && !curEntry['shortDesc']) overrideItemInfo[id]['shortDesc'] = JSON.parse(curString);
				}
			}
		}

		const overrideTypeChart = {};
		BattleTeambuilderTable[gen].overrideTypeChart = overrideTypeChart;
		const removeType = {};
		BattleTeambuilderTable[gen].removeType = removeType;
		for (const id in nextGenData.TypeChart) {
			const curEntry = genData.TypeChart[id];
			const nextEntry = nextGenData.TypeChart[id];
			if (!curEntry) {
				removeType[id] = true;
				continue;
			}
			if (JSON.stringify(nextEntry) !== JSON.stringify(curEntry)) {
				overrideTypeChart[id] = curEntry;
			}
		}
	}
	const sliceTiers = ["OU", "AG", "Uber", "UU", "(UU)", "RU", "NU", "(NU)", "PU", "(PU)",  "ZU", "NFE", "LC", "DOU", "DUU", "(DUU)", "New", "Legal", "Regular", "Restricted Legendary", "CAP LC"];
	function buildTiers(modid, tierTable, tiers, customTiers, formatSlices, tierOrder) {
		for (const tier of tierOrder) {
			if (ModConfig[modid].excludeStandardTiers) break;
			if (sliceTiers.includes(tier)) {
				let usedTier = tier;
				if (usedTier === "(UU)") usedTier = "RU";
				if (usedTier === "(NU)") usedTier = "PU";
				if (usedTier === "(PU)") usedTier = "ZU";
				if (usedTier === "(DUU)") usedTier = "DNU";
				formatSlices[usedTier] = tiers.length;
			}
			if (!tierTable[tier]) continue;
			tiers.push(['header', tier]);
			tiers.push(...tierTable[tier]);
		}
		for (const tier of ModConfig[modid].customTiers) {
			if (!tierTable[tier]) continue;
			customTiers.push(['header', tier]);
			customTiers.push(...tierTable[tier]);
		}
	}
	for (const modConfigId of Object.keys(ModConfig)) {
		if (BattleTeambuilderTable[modConfigId]) continue;
		try { // catch loading errors so the whole thing doesn't break if one mod does
			// Gather data about formats
			const modDex = Dex.mod(modConfigId);
			const modData = modDex.data;
			if (modData.Scripts.teambuilderConfig) ModConfig[modConfigId] = modData.Scripts.teambuilderConfig;
			let modGen = modDex.gen;
			const petModFormats = {};
			ModConfig[modConfigId].formats = petModFormats;
			// Find formats using this mod
			let hasSinglesFormats = false;
			let hasDoublesFormats = false;
			for (const i in Dex.formats.formatsListCache) {
				// const format = Dex.formats.get(i);
				// const formatMod = toID(format.mod);
				const formatCacheMod = toID(Dex.formats.formatsListCache[i].mod);
				const formatCacheName = toID(Dex.formats.formatsListCache[i].name);
				if (formatCacheMod !== modConfigId) continue;
				// petModFormats[formatCacheMod] = Formats.find(m => m.mod === modConfigId);
				petModFormats[formatCacheName] = Formats.find(m => toID(m.name) === formatCacheName);
				const format = petModFormats[formatCacheName];
				let maxGen = 
				formatCacheName.substr(0, 3) === 'gen' && parseInt(formatCacheMod.substr(3, 1)) < 10 ? parseInt(formatCacheMod.substr(3, 1)) : 9;
				if(format.gameType === 'doubles') hasDoublesFormats = true;
				else hasSinglesFormats = true;
				// format.name = formatCacheMod;
				if (!format.banlist) format.banlist = [];
				if (!format.unbanlist) format.unbanlist = [];
				if (!format.teambuilderFormat) format.teambuilderFormat = '';
				format.bans = [];
				format.unbans = [];
				if (!!format.banlist) {
					for (const name of format.banlist) {
						let id = toID(name);
						if(name.endsWith('-Base')) id = id.substr(0, id.length - 4);
						if (id in Dex.data.Pokedex || id in modData.Pokedex) format.bans.push(id);
						const formes = modData.Pokedex[id]?.otherFormes;
						if(formes && toID(name) === id){ //id wasn't modified for base forme ban, therefore all formes are banned
							for(const forme of formes){
								const formeid = toID(forme);
								if (formeid in Dex.data.Pokedex || formeid in modData.Pokedex) format.bans.push(formeid);
							}
						}
					}
					if (!!format.banlist && format.banlist.includes("All Pokemon")) {
						format.bans.push('All Pokemon');
						for (const name of format.unbanlist) {
							let id = toID(name);
							if(name.endsWith('-Base')) id = id.substr(0, id.length - 4);
							if (id in Dex.data.Pokedex || id in modData.Pokedex) format.unbans.push(id);
							const formes = modData.Pokedex[id]?.otherFormes;
							if(formes && toID(name) === id){ //id wasn't modified for base forme ban, therefore all formes are banned
								for(const forme of formes){
									const formeid = toID(forme);
									if (formeid in Dex.data.Pokedex || formeid in modData.Pokedex) format.unbans.push(formeid);
								}
							}
						}
					}
				}
				if (formatCacheMod.startsWith('gen') && maxGen < Number(formatCacheMod.charAt(3))) maxGen = Number(formatCacheMod.charAt(3));
				if (maxGen !== 9) modGen = maxGen;
			}
			// Find any nonstandard tiers used by this mod
			const standardTiers = ['uber', 'ou', 'uubl', 'uu', 'rubl', 'ru', 'nubl', 'nu', 'publ',
				'pu', 'zubl', 'zu', 'nfe', 'lcuber', 'lc', 'cap', 'caplc', 'capnfe', 'ag', 'duber', 'dou',
				'dbl', 'duu', 'dnu', 'illegal', 'unreleased'];
			if (!ModConfig[modConfigId].customTiers) ModConfig[modConfigId].customTiers = [];
			if (!ModConfig[modConfigId].customDoublesTiers) ModConfig[modConfigId].customDoublesTiers = [];
			for (const speciesid in modData.FormatsData) {
				if (!modData.FormatsData[speciesid]) {
					if(debug && !(speciesid in Dex.data.Pokedex)) console.log('Warning: ' + speciesid + ' does not have tiering data in ' + modConfigId);
					continue;
				}
				const tier = modData.FormatsData[speciesid].tier;
				const doublesTier = modData.FormatsData[speciesid].doublesTier;
				if (tier === undefined && doublesTier === undefined) continue;
				if (!standardTiers.includes(toID(tier)) &&
					!ModConfig[modConfigId].customTiers.includes(tier)) {
					ModConfig[modConfigId].customTiers.push(tier);
				}
				if (!standardTiers.includes(toID(doublesTier)) &&
					!ModConfig[modConfigId].customDoublesTiers.includes(doublesTier)) {
					ModConfig[modConfigId].customDoublesTiers.push(doublesTier);
				}
			}
			BattleTeambuilderTable[modConfigId] = {};
			//tiers
			const tierTable = {};
			const pokemon = Object.keys(modData.Pokedex);
			pokemon.sort();
			const overrideTier = {};
			if(hasSinglesFormats) {
				BattleTeambuilderTable[modConfigId].overrideTier = overrideTier;
			}
			const doublesOverrideTier = {};
			if (hasDoublesFormats) {
				BattleTeambuilderTable[modConfigId].doubles = {};
				BattleTeambuilderTable[modConfigId].doubles.overrideTier = doublesOverrideTier;
			}
			for (const id of pokemon) {
				const species = modDex.species.get(id);
				const tier = species.tier;
				overrideTier[species.id] = tier;
				if (species.forme && JSON.stringify(modData.Pokedex[species.id]) === JSON.stringify(Dex.data.Pokedex[species.id]) && !ModConfig.showAllFormes) { // hardcode from main
				if (
						[
							'Aegislash', 'Castform', 'Cherrim', 'Cramorant', 'Eiscue', 'Meloetta', 'Mimikyu', 'Minior', 'Morpeko', 'Wishiwashi',
						].includes(species.baseSpecies) || species.forme.includes('Totem') || species.forme.includes('Zen')
					) {
						continue;
					}
				}
				if (!tierTable[tier]) tierTable[tier] = [];
				tierTable[tier].push(id);
				if (hasDoublesFormats) {
					const doublesTier = species.doublesTier;
					doublesOverrideTier[species.id] = species.doublesTier;
					if (!tierTable[doublesTier]) tierTable[doublesTier] = [];
					if (tier !== doublesTier) tierTable[doublesTier].push(id);
				}
			}
			for (const tier in tierTable) {
				for (const formatid in petModFormats) {
					const banlist = petModFormats[formatid].banlist;
					if (!!banlist.includes(tier) || !!banlist.includes(toID(tier))) {
						for (const i in tierTable[tier]) {
							const speciesid = tierTable[tier][i];
							if (!petModFormats[formatid].banlist.includes(speciesid)) petModFormats[formatid].bans.push(speciesid);
						}
					}
				}
			}
			const tiers = [];
			BattleTeambuilderTable[modConfigId].tiers = tiers;
			const doublesTiers = [];
			if (hasDoublesFormats) BattleTeambuilderTable[modConfigId].doubles.tiers = doublesTiers;
			const customTiers = [];
			BattleTeambuilderTable[modConfigId].customTiers = customTiers;
			const customDoublesTiers = [];
			if (hasDoublesFormats) BattleTeambuilderTable[modConfigId].doubles.customTiers = customDoublesTiers;
			const formatSlices = {};
			BattleTeambuilderTable[modConfigId].formatSlices = formatSlices;
			const doublesFormatSlices = {};
			if (hasDoublesFormats) BattleTeambuilderTable[modConfigId].doubles.formatSlices = doublesFormatSlices;
			const tierOrder = ["OU", "AG", "Uber", "(Uber)", "OU", "(OU)", "UUBL", "UU", "RUBL", "RU", "NUBL", "NU", "PUBL", "PU", "(PU)", "ZUBL", "ZU", "New", "NFE", "LC Uber", "LC", "Unreleased"];
			const tierOrderDoubles = ["DUber", "(DUber)", "DOU", "DBL", "(DOU)", "DUU", "(DUU)", "New", "NFE", "LC Uber", "LC"];
			if (hasSinglesFormats) buildTiers(modConfigId, tierTable, tiers, customTiers, formatSlices, tierOrder);
			if (hasDoublesFormats) buildTiers(modConfigId, tierTable, doublesTiers, customDoublesTiers, doublesFormatSlices, tierOrderDoubles);
			//pokemon stats
			const overrideDexInfo = {};
			BattleTeambuilderTable[modConfigId].overrideDexInfo = overrideDexInfo;
			for (const id in modData.Pokedex) {
				const modEntry = modData.Pokedex[id];
				const baseEntry = Dex.data.Pokedex[id];
				if (typeof baseEntry === 'undefined') {
					overrideDexInfo[id] = {};
					overrideDexInfo[id] = modEntry;
					overrideDexInfo[id].exists = true;
					continue;
				}
				for (const key in modEntry) {
					const modString = JSON.stringify(modEntry[key]);
					const baseString = JSON.stringify(baseEntry[key]);
					if (modString !== baseString) {
						if (!overrideDexInfo[id]) overrideDexInfo[id] = {};
						if (modString === undefined) overrideDexInfo[id][key] = undefined;
						else overrideDexInfo[id][key] = JSON.parse(modString);
					}
				}
			}
			//learnsets
			const overrideLearnsets = {};
			BattleTeambuilderTable[modConfigId].overrideLearnsets = overrideLearnsets;
			for (const id in modDex.data.Learnsets) {
				const learnset = modDex.data.Learnsets[id].learnset;
				const baseLearnset = Dex.data.Learnsets[id] ? Dex.data.Learnsets[id].learnset : {};
				if (!learnset) continue;
				if (!learnsets[id]) learnsets[id] = {};
				for (const moveid in learnset) {
					const newLearnsetEntry = getLearnsetStr(moveid, learnset[moveid], id, modConfigId);
					let baseLearnsetEntry = learnsets[id][moveid];
					if (modGen <= 2 && G2Learnsets[id]) baseLearnsetEntry = G2Learnsets[id][moveid];
					const baseLsetNoEarlyGen = baseLearnsetEntry ? baseLearnsetEntry.replace(1, '').replace(2, '') : '';
					if (newLearnsetEntry !== baseLearnsetEntry && newLearnsetEntry !== baseLsetNoEarlyGen) {
						if (!overrideLearnsets[id]) overrideLearnsets[id] = {};
						overrideLearnsets[id][moveid] = newLearnsetEntry;
					}
				}
				for (const moveid in baseLearnset) {
					if (baseLearnset[moveid] && !learnset[moveid]) {
						if (!overrideLearnsets[id]) overrideLearnsets[id] = {};
						overrideLearnsets[id][moveid] = 'r';
					}
				}
			}
			//items			
			let items = [];
			const fullItemName = {};
			BattleTeambuilderTable[modConfigId].fullItemName = fullItemName;
			BattleTeambuilderTable[modConfigId].items = items;
			const overrideItemInfo = {};
			BattleTeambuilderTable[modConfigId].overrideItemInfo = overrideItemInfo;

			const greatItems = [];
			const goodItems = [];
			const specificItems = [];
			const poorItems = [];
			const badItems = [];
			for (const id in modData.Items) {
				const modEntry = modData.Items[id];
				const baseEntry = Dex.data.Items[id];
				if (typeof baseEntry === 'undefined') {
					overrideItemInfo[id] = {};
					overrideItemInfo[id] = modEntry;
					overrideItemInfo[id].exists = true;
					fullItemName[id] = modData.Items[id].name;
				} else {
					if(baseEntry.gen > modGen) continue;
					for (const key in modEntry) {
						if (!overrideItemKeys.includes(key)) continue;
						const modString = JSON.stringify(modEntry[key]);
						const baseString = JSON.stringify(baseEntry[key]);
						if (modString !== baseString) {
							if (!overrideItemInfo[id]) overrideItemInfo[id] = {};
							overrideItemInfo[id][key] = JSON.parse(modString);
							if(key === 'desc' && !modEntry['shortDesc']) overrideItemInfo[id]['shortDesc'] = JSON.parse(modString);
						}
					}
				}
				
				if (modEntry.itemUser || modEntry.megaStone || id === 'boosterenergy') {
					specificItems.push(id);
					continue;
				}
				if (modEntry.isPokeball || modEntry.name.startsWith("TR")) {
					badItems.push(id);
					continue;
				}
				switch (modEntry.rating) {
				case 3:
					greatItems.push(id);
					break;
				case 2:
					goodItems.push(id);
					break;
				// outclassed items
				case 1:
					poorItems.push(id);
					break;
				// Fling-only
				case 0:
					badItems.push(id);
					break;
				// Allows mods to manually set Pokemon-specific items
				case -1:
					specificItems.push(id);
					break;
				default:
					goodItems.push(id);
				}
			}
			greatItems.sort();
			greatItems.unshift(['header', "Popular items"]);
			items.push(...greatItems);
			goodItems.sort();
			goodItems.unshift(['header', "Items"]);
			items.push(...goodItems);
			specificItems.sort();
			specificItems.unshift(['header', "Pok&eacute;mon-specific items"]);
			items.push(...specificItems);
			poorItems.sort();
			poorItems.unshift(['header', "Usually useless items"]);
			items.push(...poorItems);
			badItems.sort();
			badItems.unshift(['header', "Useless items"]);
			items.push(...badItems);
			//moves
			const overrideMoveInfo = {};
			BattleTeambuilderTable[modConfigId].overrideMoveInfo = overrideMoveInfo;
			for (const id in modData.Moves) {
				const modEntry = modData.Moves[id];
				const baseEntry = Dex.data.Moves[id];
				const genEntry = modGen !== 9 ? Dex.mod('gen'+modGen).data.Moves[id] : null;
				if (typeof baseEntry === 'undefined') {
					overrideMoveInfo[id] = {};
					overrideMoveInfo[id] = modEntry;
					overrideMoveInfo[id].exists = true;
					continue;
				}
				let moddedMoveIsOldGen = true;
				for (const key in modEntry) {
					if (!overrideMoveKeys.includes(key)) continue;
					const modString = JSON.stringify(modEntry[key]);
					const baseString = JSON.stringify(baseEntry[key]);
					if (modString !== baseString) {
						if (genEntry && moddedMoveIsOldGen) {
							const genString = JSON.stringify(genEntry[key]);
							if (genString !== modString) {
								moddedMoveIsOldGen = false;
							}
						}
						if (!overrideMoveInfo[id]) overrideMoveInfo[id] = {};
						if (modString === undefined) overrideMoveInfo[id][key] = undefined;
						else overrideMoveInfo[id][key] = JSON.parse(modString);
					}
				}
				if (overrideMoveInfo[id] && moddedMoveIsOldGen) overrideMoveInfo[id].modMoveFromOldGen = true;
			}
			for(const id in Dex.data.Moves){ //Weed out nulled moves
				const modEntry = modData.Moves[id];
				if(!modEntry){
					overrideMoveInfo[id] = {};
					overrideMoveInfo[id].isNonstandard = "Unobtainable";
					overrideMoveInfo[id].exists = false;
					continue;
				}
			}
			//abilities
			const fullAbilityName = {};
			BattleTeambuilderTable[modConfigId].fullAbilityName = fullAbilityName;
			const overrideAbilityDesc = {};
			BattleTeambuilderTable[modConfigId].overrideAbilityDesc = overrideAbilityDesc;
			for (const id in modData.Abilities) {
				const modEntry = modData.Abilities[id];
				const baseEntry = Dex.data.Abilities[id];
				const fakeAbility = (typeof baseEntry === 'undefined');
				if (fakeAbility) fullAbilityName[id] = modData.Abilities[id].name;
				if (fakeAbility || (modEntry.shortDesc || modEntry.desc) !== (baseEntry.shortDesc || baseEntry.desc)) {
					overrideAbilityDesc[id] = (modEntry.shortDesc || modEntry.desc);
				}
			}
			//type chart
			const overrideTypeChart = {};
			BattleTeambuilderTable[modConfigId].overrideTypeChart = overrideTypeChart;
			for (const id in modData.TypeChart) {
				const modEntry = modData.TypeChart[id];
				const baseEntry = Dex.data.TypeChart[id];
				if (JSON.stringify(modEntry) !== JSON.stringify(baseEntry)) {
					overrideTypeChart[id] = modEntry;
				}
			}
		} catch (err) {
			delete ModConfig[modConfigId];
			delete BattleTeambuilderTable[modConfigId];
			if (debug) {
				console.log("WARNING: Failed to load " + modConfigId);
				console.log("This was the error:");
				console.log(err);
			}
		}
	}

	//
	// (not pet) Mods
	//

	for (const mod of ['gen7letsgo', 'gen8bdsp']) {
		const modDex = Dex.mod(mod);
		const modData = modDex.data;
		const parentDex = Dex.forGen(modDex.gen);

		const overrideSpeciesData = {};
		BattleTeambuilderTable[mod].overrideSpeciesData = overrideSpeciesData;
		for (const id in modData.Pokedex) {
			const modEntry = modDex.species.get(id);
			const parentEntry = parentDex.species.get(id);
			for (const key of overrideSpeciesKeys) {
				if (JSON.stringify(modEntry[key]) !== JSON.stringify(parentEntry[key])) {
					if (!overrideSpeciesData[id]) overrideSpeciesData[id] = {};
					overrideSpeciesData[id][key] = modEntry[key];
				}
			}
		}

		var overrideMoveData = {};
		BattleTeambuilderTable[mod].overrideMoveData = overrideMoveData;
		for (const id in modData.Moves) {
			const modEntry = modDex.moves.get(id);
			const parentEntry = parentDex.moves.get(id);
			for (const key of overrideMoveKeys) {
				if (key === 'category' && modDex.gen <= 3) continue;
				if (JSON.stringify(modEntry[key]) !== JSON.stringify(parentEntry[key])) {
					if (!overrideMoveData[id]) overrideMoveData[id] = {};
					overrideMoveData[id][key] = modEntry[key];
				}
			}
		}

		var overrideAbilityData = {};
		BattleTeambuilderTable[mod].overrideAbilityData = overrideAbilityData;
		for (const id in modData.Abilities) {
			const modEntry = modDex.abilities.get(id);
			const parentEntry = parentDex.abilities.get(id);
			for (const key of overrideAbilityKeys) {
				if (JSON.stringify(modEntry[key]) !== JSON.stringify(parentEntry[key])) {
					if (!overrideAbilityData[id]) overrideAbilityData[id] = {};
					overrideAbilityData[id][key] = modEntry[key];
				}
			}
		}
	}

	/*

	This block of code is a bit wild, I might not be able to help with it too much.

	Essentially it breaks down everything in BattleTeambuilderTable into blocks of 5,
	casts them to a JSON object and then un-JSONs them by deleting the curly braces
	that surround them. It =manually parses the edges of the entire JSON file so that the whole
	thing is treated as a single JSON object with sub-objects to be loaded by the teambuilder.

	*/

	const tableKeys = Object.keys(BattleTeambuilderTable);
	const blockSize = 5;
	let blockIndex = 0;

	console.log("writing BattleTeambuilderTable...");
	const tableDir = 'play.pokemonshowdown.com/data/teambuilder-tables.js';
	fs.writeFileSync(tableDir, '// DO NOT EDIT - automatically built with build-tools/build-indexes\n\n');
	fs.appendFileSync(tableDir, 'exports.BattleTeambuilderTable = JSON.parse(\'{')

	// ChatGPT suggested to put BattleTeambuilderTable into blocks to prevent memory overload.
	while (blockIndex < tableKeys.length) {
		const block = tableKeys.slice(blockIndex, blockIndex + blockSize);
		const blockTable = {};
		block.forEach(key => {
			blockTable[key] = BattleTeambuilderTable[key];
		});
		var jsonString = JSON.stringify(blockTable).replace(/['\\]/g, "\\$&");
		jsonString = jsonString.substring(1, jsonString.length - 1);
		fs.appendFileSync(tableDir, jsonString);
		blockIndex += blockSize;
		if (blockIndex < tableKeys.length) fs.appendFileSync(tableDir, ',');
	}
	fs.appendFileSync(tableDir, '}\');\n\n');
	console.log("DONE");

	console.log("writing compressed data/teambuilder-tables.js.gz...");

	var zlib = require('zlib');
	var gzip = zlib.createGzip();
	var tbtJs = fs.createReadStream(tableDir);
	var tbtGz = fs.createWriteStream(tableDir + '.gz');
	tbtJs.pipe(gzip).pipe(tbtGz);

	console.log("DONE");

	console.log("writing ModConfig...");
	fs.writeFileSync('play.pokemonshowdown.com/data/mod-config.js', 'exports.ModConfig = ' + JSON.stringify(ModConfig) + ';\n\n');
	console.log("DONE");
}



/*********************************************************
 * Build pokedex.js
 *********************************************************/

function buildPokedex() {
	const Pokedex = requireNoCache('../caches/DH2/dist/data/pokedex.js').Pokedex;
	for (const id in Pokedex) {
		const entry = Pokedex[id];
		if (Dex.data.FormatsData[id]) {
			// console.log('formatsentry:' + id);
			const formatsEntry = Dex.data.FormatsData[id];
			if (formatsEntry.tier) entry.tier = formatsEntry.tier;
			if (formatsEntry.isNonstandard) entry.isNonstandard = formatsEntry.isNonstandard;
			if (formatsEntry.unreleasedHidden) entry.unreleasedHidden = formatsEntry.unreleasedHidden;
		}
	}
	const buf = 'exports.BattlePokedex = ' + es3stringify(Pokedex) + ';';
	fs.writeFileSync('play.pokemonshowdown.com/data/pokedex.js', buf);
	fs.writeFileSync('play.pokemonshowdown.com/data/pokedex.json', JSON.stringify(Pokedex));
}

/*********************************************************
 * Build moves.js
 *********************************************************/

function buildMoves() {
	const Moves = requireNoCache('../caches/DH2/dist/data/moves.js').Moves;
	for (const id in Moves) {
		const move = Dex.moves.get(Moves[id].name);
		if (move.desc) Moves[id].desc = move.desc;
		if (move.shortDesc) Moves[id].shortDesc = move.shortDesc;
	}
	const buf = 'exports.BattleMovedex = ' + es3stringify(Moves) + ';';
	fs.writeFileSync('play.pokemonshowdown.com/data/moves.js', buf);
	fs.writeFileSync('play.pokemonshowdown.com/data/moves.json', JSON.stringify(Moves));
}

/*********************************************************
 * Build items.js
 *********************************************************/

function buildItems() {
	const Items = requireNoCache('../caches/DH2/dist/data/items.js').Items;
	for (const id in Items) {
		const item = Dex.items.get(Items[id].name);
		if (item.desc) Items[id].desc = item.desc;
		if (item.shortDesc) Items[id].shortDesc = item.shortDesc;
	}
	const buf = 'exports.BattleItems = ' + es3stringify(Items) + ';';
	fs.writeFileSync('play.pokemonshowdown.com/data/items.js', buf);
}

/*********************************************************
 * Build abilities.js
 *********************************************************/

function buildAbilities() {
	const Abilities = requireNoCache('../caches/DH2/dist/data/abilities.js').Abilities;
	for (const id in Abilities) {
		const ability = Dex.abilities.get(Abilities[id].name);
		if (ability.desc) Abilities[id].desc = ability.desc;
		if (ability.shortDesc) Abilities[id].shortDesc = ability.shortDesc;
	}
	const buf = 'exports.BattleAbilities = ' + es3stringify(Abilities) + ';';
	fs.writeFileSync('play.pokemonshowdown.com/data/abilities.js', buf);
}

/*********************************************************
 * Build typechart.js
 *********************************************************/

function buildTypechart() {
	const TypeChart = requireNoCache('../caches/DH2/dist/data/typechart.js').TypeChart;
	const buf = 'exports.BattleTypeChart = ' + es3stringify(TypeChart) + ';';
	fs.writeFileSync('play.pokemonshowdown.com/data/typechart.js', buf);
}

/*********************************************************
 * Build aliases.js
 *********************************************************/

function buildAliases() {
	const Aliases = requireNoCache('../caches/DH2/dist/data/aliases.js').Aliases;
	const buf = 'exports.BattleAliases = ' + es3stringify(Aliases) + ';';
	fs.writeFileSync('play.pokemonshowdown.com/data/aliases.js', buf);
}

/*********************************************************
 * Build formats-data.js
 *********************************************************/

function buildFormatsData() {
	const FormatsData = requireNoCache('../caches/DH2/dist/data/formats-data.js').FormatsData;
	const buf = 'exports.BattleFormatsData = ' + es3stringify(FormatsData) + ';';
	fs.writeFileSync('play.pokemonshowdown.com/data/formats-data.js', buf);
}

/*********************************************************
 * Build formats.js
 *********************************************************/

function buildFormats() {
	Formats = requireNoCache('../caches/DH2/dist/config/formats.js').Formats;
	const buf = 'exports.Formats = ' + es3stringify(Formats) + ';';
	fs.writeFileSync('play.pokemonshowdown.com/data/formats.js', buf);
}

/*********************************************************
 * Build learnsets.js
 *********************************************************/

function buildLearnsets() {
	const Learnsets = requireNoCache('../caches/DH2/dist/data/learnsets.js').Learnsets;
	const buf = 'exports.BattleLearnsets = ' + es3stringify(Learnsets) + ';';
	fs.writeFileSync('play.pokemonshowdown.com/data/learnsets.js', buf);
	fs.writeFileSync('play.pokemonshowdown.com/data/learnsets.json', JSON.stringify(Learnsets));
}

/*********************************************************
 * Build mod-sprites.js
 *********************************************************/

function buildModSprites() {
	const modSprites = {};
	const modDir = fs.readdirSync('caches/DH2/data/mods/');
	for (const i in modDir) {
		const modName = modDir[i];
		const subFolders = ['anifront', 'anifront-shiny','aniback','aniback-shiny','front', 'front-shiny', 'back', 'back-shiny', 'icons', 'types', 'items'];
		for (const j in subFolders) {
			const subF = subFolders[j];
			const spritePath = 'caches/DH2/data/mods/' + modName + '/sprites/' + subF;
			const spriteDir = fs.existsSync(spritePath) ? fs.readdirSync(spritePath) : '';
			for (const sprI in spriteDir) {
				let id = spriteDir[sprI];
				const ext = id.split(".")[1];
				id = toID(id.slice(0, id.length - 4));
				if (!modSprites[id]) modSprites[id] = {};
				if (!modSprites[id][modName]) modSprites[id][modName] = [];
				modSprites[id][modName].push(subF);
			}
		}
	}
	const buf = 'exports.ModSprites = ' + es3stringify(modSprites) + ';';
	fs.writeFileSync('play.pokemonshowdown.com/data/mod-sprites.js', buf);
}

/*********************************************************
 * Build text.js
 *********************************************************/

function buildText() {
	const textData = Dex.loadTextData();
	const Text = textData.Default;

	function assignData(id, entry) {
		for (const key in entry) {
			if (['name', 'desc', 'shortDesc'].includes(key)) continue;
			const textEntry = Text[id] || (Text[id] = {});
			if (key.startsWith('gen')) {
				for (const modKey in entry[key]) {
					if (['desc', 'shortDesc'].includes(key)) continue;
					textEntry[modKey + 'Gen' + key.charAt(3)] = entry[key][modKey];
				}
			} else {
				textEntry[key] = entry[key];
			}
		}
	}

	for (const id in textData.Moves) assignData(id, textData.Moves[id]);
	for (const id in textData.Abilities) assignData(id, textData.Abilities[id]);
	for (const id in textData.Items) assignData(id, textData.Items[id]);

	const buf = 'exports.BattleText = ' + es3stringify(Text) + ';';
	fs.writeFileSync('play.pokemonshowdown.com/data/text.js', buf);
}
